#! /usr/bin/env ruby
# frozen_string_literal: true

require 'pg'
require 'date'
require 'io/console'

# Receives arguments from CLI for app execution
class CLI
  COMMANDS = %w[help list add search delete clear].freeze

  def initialize
    @application = ExpenseData.new
  end

  def run(args)
    if COMMANDS.include?(args[0]) == false
      puts "Sorry, command \'#{args[0]}\' is not valid\n\n"
    elsif ['add'].include?(args[0].downcase)
      @command, @cost, @item, @date = *args
    elsif %w(search delete clear list).include?(args[0].downcase)
      @command, @item = *args
    end

    parse_command
  end

  HELP = <<~HELP
    Commands:\n
    add AMOUNT MEMO - record a new expense
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
  HELP

  def display_help
    puts "An expense recording system\n\n"
    puts HELP
  end

  def parse_command
    if !@command || @command.downcase == 'help'
      display_help
    elsif @command == 'list'
      @application.display_list
    elsif @command == 'add'
      @application.add_expense(@cost, @item, @date)
    elsif @command == 'search'
      @application.search(@item)
    elsif @command == 'delete'
      @application.delete_expense(@item)
    elsif @command == 'clear'
      @application.delete_all_expenses
    end
  end
end

# Handles expense list application SQL interactions
class ExpenseData
  def initialize
    @expense_db = PG.connect(dbname: 'project1')
  end

  def display_list
    @expenses = @expense_db.exec('SELECT * FROM expenses ORDER BY id')
    puts "No items have been entered." if @expenses.ntuples == 0
    
    @expenses.each do |tuple|
      columns = [tuple['id'].rjust(3),
                 tuple['created_on'].rjust(10),
                 tuple['amount'].rjust(12),
                 tuple['memo']]

      puts columns.join(' | ')
    end
  end

  def add_expense(cost, item, date)
    error_help = validate_add(cost, item, date)

    if !error_help
      @expense_db.exec_params('INSERT INTO expenses(amount, memo, created_on)'\
        'VALUES ($1, $2, $3);', [cost, item, (date || Date.today.to_s)]).values
    else
      puts error_help
      puts @help
    end
  end

  def validate_add(cost, item, date)
    return 'Please enter a valid amount' unless cost.to_f > 0.0

    if !cost
      "You must specify an AMOUNT\n\n"
    elsif !item
      "You must specify a MEMO\n\n"
    elsif date
      validate_date(date)
    else
      false
    end
  end

  def validate_date(date_str)
    Date.valid_date?(*date_str.split('-').map(&:to_i))
  rescue ArgumentError, NameError
    'The date you have entered is invalid.'
  else
    false
  end

  def search(item)
    @item = item
    if @item
      @item = "%#{@item}%"
    else
      puts 'Please enter a search term.'
    end

    query = @expense_db.exec_params('SELECT * FROM expenses WHERE memo ILIKE $1'\
      'ORDER BY id,created_on;', [@item])

    display_result(query)
  end

  def display_result(query)
    query.each do |tuple|
      columns = [tuple['id'].rjust(3),
                 tuple['created_on'].rjust(10),
                 tuple['amount'].rjust(12),
                 tuple['memo']]

      puts columns.join(' | ')
    end
  end

  def delete_expense(id)
    deleted_expense = @expense_db.exec_params('SELECT * FROM expenses WHERE id = $1;', [id])

    if deleted_expense.ntuples.zero?
      puts "There is no expense with the id #{id || 'BLANK'}."
    else
      query = @expense_db.exec_params('DELETE FROM expenses WHERE id = $1;', [id])
      puts 'The following expense was deleted:'
      deleted_expense.each do |tuple|
        columns = [tuple['id'].rjust(3),
                   tuple['created_on'].rjust(10),
                   tuple['amount'].rjust(12),
                   tuple['memo']]

        puts columns.join(' | ')
      end
    end
  end

  def delete_all_expenses
    puts 'This will remove all expenses. Are you sure? (y/n)'
    answer = STDIN.raw(&:getch)
    @expense_db.exec('DELETE FROM expenses;') if answer == 'y'
    puts 'All expenses have been deleted.'
  end
end

CLI.new.run(ARGV)
